from fastapi import FastAPI, WebSocket
from starlette.websockets import WebSocketState
import uvicorn
import json

app = FastAPI()

@app.websocket("/verify")
async def verifier_agent(websocket: WebSocket):
    await websocket.accept()
    try:
        while True:
            try:
                data = await websocket.receive_json()
                final_inference = data.get("final_ranking", [])
                generated_answer = data.get("generated_answer", "").strip().lower()
                challenges = []

                for item in final_inference:
                    concept = item["concept"]
                    sources = item.get("sources", [])
                    confidence_delta = item.get("confidence_delta", 0.0)
                    justification = " ".join(item.get("justifications", []))
                    goal_list = item.get("goals", [])

                    # Rule 1: No confidence adjustment
                    if confidence_delta == 0.0:
                        challenges.append({
                            "concept": concept,
                            "issue": "No confidence adjustment after peer round.",
                            "comment": f"{concept} had zero delta even after peer review. Justification: {justification}"
                        })

                    # Rule 2: Support from only one agent
                    if not ("SimilarityAgent" in sources and "RelationAgent" in sources):
                        challenges.append({
                            "concept": concept,
                            "issue": "Supported by only one agent.",
                            "comment": f"{concept} lacks full support across agents. Sources: {sources}"
                        })

                    # Rule 3: Missing or weak goal
                    if not goal_list or not goal_list[0] or len(goal_list[0].strip()) < 5:
                        challenges.append({
                            "concept": concept,
                            "issue": "Goal is missing or too weak.",
                            "comment": f"{concept} has no strong goal associated. Goal: {goal_list}"
                        })

                # New Rule 4: Generated answer sanity check
                if not generated_answer:
                    challenges.append({
                        "concept": "N/A",
                        "issue": "Generated answer is empty.",
                        "comment": "No response was generated by the Response Generation Agent."
                    })
                elif len(generated_answer.split()) < 2:
                    challenges.append({
                        "concept": "N/A",
                        "issue": "Generated answer too short.",
                        "comment": f"The generated answer seems too short: '{generated_answer}'"
                    })

                await websocket.send_json({"challenges": challenges})

            except Exception as inner_e:
                print("[Verifier Agent] Message handling error:", str(inner_e))
                break

    except Exception as e:
        print("[Verifier Agent] WebSocket connection error:", str(e))

    finally:
        if websocket.application_state != WebSocketState.DISCONNECTED:
            await websocket.close()
        print("[Verifier Agent] WebSocket session ended.")

if __name__ == "__main__":
    uvicorn.run("verifier_agent:app", host="localhost", port=8010, reload=True, timeout_keep_alive=120)
